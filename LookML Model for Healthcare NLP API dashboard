explore: entitymentions {
  label: "Healthcare NLP"
#  sql_always_where: ${text__content} not in ("liquor","wine","alphanumbericid") ;;
  join: entitymentions__linked_entities {
    view_label: "Entitymentions: Linkedentities"
    sql: INNER JOIN UNNEST(${entitymentions.linked_entities}) as entitymentions__linked_entities WITH OFFSET as entity_id_offset;;
    relationship: one_to_many
#    type: inner
  }
  join: relations {
#    type: full_outer
    relationship: one_to_many
    sql_on: ${entitymentions.mention_id}=${relations.object_id} and ${entitymentions.mention_id}=${relations.subject_id} ;;
  }

  join: entity {
#    type: left_outer
    relationship: one_to_one
    sql_on: ${entity.entity_id}=${entitymentions__linked_entities.entity_id} ;;
    type: inner
  }

  join: entity__vocabulary_codes {
    view_label: "Entity: Vocabularycodes"
    sql: LEFT JOIN UNNEST(${entity.vocabulary_codes}) as entity__vocabulary_codes WITH OFFSET as entity__vocabulary_codes_offset ;;
    relationship: one_to_many
  }
  join: nlpinput {
    relationship: many_to_one
    sql_on: ${entitymentions.id}=${nlpinput.id} ;;
  }
}

view: entity {
  # The sql_table_name parameter indicates the underlying database table
  # to be used for all fields in this view.
  sql_table_name: `###`
    ;;
  drill_fields: [entity_id]
  # This primary key is the unique key for this table in the underlying database.
  # You need to define a primary key in a view in order to join to other views.

  dimension: entity_id {
    primary_key: yes
    type: string
    sql: ${TABLE}.entityId ;;
  }

  # Here's what a typical dimension looks like in LookML.
  # A dimension is a groupable field that can be used to filter query results.
  # This dimension will be called "Preferred Term" in Explore.

  dimension: preferred_term {
    type: string
    sql: ${TABLE}.preferredTerm ;;
  }

  dimension: preferred_term2 {
    type: string
    label: "Preferred Term"
    group_label: "(1) Term"
    description: "This is the normalized medical term output from the NLP API."
    #sql: ${TABLE}.preferredTerm ;;
    sql: regexp_replace(LOWER(${TABLE}.preferredTerm),"[^a-zA-Z0-9 -]",'');;
  }

  # This field is hidden, which means it will not show up in Explore.
  # If you want this field to be displayed, remove "hidden: yes".

  dimension: vocabulary_codes {
    group_label: "Vocab Codes"
    hidden: no
    sql: ${TABLE}.vocabularyCodes ;;
  }

  measure: count {
    type: count
    drill_fields: [entity_id]
  }


}

# The name of this view in Looker is "Entity Vocabulary Codes"
view: entity__vocabulary_codes {
  # No primary key is defined for this view. In order to join this view in an Explore,
  # define primary_key: yes on a dimension that has no repeated values.

  # Here's what a typical dimension looks like in LookML.
  # A dimension is a groupable field that can be used to filter query results.
  # This dimension will be called "Entity Vocabulary Codes" in Explore.

  dimension: entity__vocabulary_codes {
    type: string
    sql: entity__vocabulary_codes ;;
  }

  dimension: vocab_codes_linked {
    group_label: "Vocab Codes"
    label: "Vocab Codes (String)"
    type: string
    sql: ${entity__vocabulary_codes} ;;
    link: {
      label: "Google this Vocabulary Code"
      url: "https://www.google.com/search?q={{value | url_encode}}+code"
      icon_url: "https://www.google.com/images/branding/googleg/1x/googleg_standard_color_128dp.png"
    }
  }

  dimension: vocabulary {
    group_label: "Vocab Codes"
    label: "Vocab Source"
    type: string
    sql: CASE
        WHEN ${entity__vocabulary_codes} LIKE 'FMA/%' THEN 'Foundational Model of Anatomy'
        WHEN ${entity__vocabulary_codes} LIKE 'GO/%' THEN 'Gene Ontology'
        WHEN ${entity__vocabulary_codes} LIKE 'HGNC/%' THEN 'HUGO Gene Nomenclature Committee'
        WHEN ${entity__vocabulary_codes} LIKE 'HPO/%' THEN 'Human Phenotype Ontology'
        WHEN ${entity__vocabulary_codes} LIKE 'ICD9CM/%' THEN 'ICD-9-CM'
        WHEN ${entity__vocabulary_codes} LIKE 'MSH/%' THEN 'MeSH'
        WHEN ${entity__vocabulary_codes} LIKE 'MTH/%' THEN 'Metathesaurus Names'
        WHEN ${entity__vocabulary_codes} LIKE 'NCBI/%' THEN 'NCBI Taxonomy'
        WHEN ${entity__vocabulary_codes} LIKE 'NCI/%' THEN 'NCI Thesaurus'
        WHEN ${entity__vocabulary_codes} LIKE 'OMIM/%' THEN 'Online Mendelian Inheritance in Man'
        WHEN ${entity__vocabulary_codes} LIKE 'RXNORM/%' THEN 'RXNORM'
        WHEN ${entity__vocabulary_codes} LIKE 'LNC/%' THEN 'LOINC'
        WHEN ${entity__vocabulary_codes} LIKE 'ICD10PCS/%' THEN 'ICD-10 Procedure Coding System'
        WHEN ${entity__vocabulary_codes} LIKE 'VANDF/%' THEN 'National Drug File'
        ELSE 'unknown' END ;;
    link: {
      label: "Google this Vocabulary"
      url: "https://www.google.com/search?q={{value | uri_encode}}"
      icon_url: "https://www.google.com/images/branding/googleg/1x/googleg_standard_color_128dp.png"
    }
  }


  dimension: offset {
    type: number
    sql: entity__vocabulary_codes_offset ;;
  }
}

# The name of this view in Looker is "Entitymentions"
view: entitymentions {
  # The sql_table_name parameter indicates the underlying database table
  # to be used for all fields in this view.
  sql_table_name: `###`
    ;;
  drill_fields: [id]
  # This primary key is the unique key for this table in the underlying database.
  # You need to define a primary key in a view in order to join to other views.

  dimension: id {
    primary_key: yes
    label: "Record ID"
    type: string
    sql: ${TABLE}.id ;;
    drill_fields: [detail*]
  }
  measure: count_of_mentions_with_fatigue {
    type: count_distinct
    filters: [entity.entity_id: "UMLS/C0015672",certainty_assessment__value: "LIKELY",temporal_assessment__value: "CURRENT"]
    sql: ${id} ;;
    drill_fields: [detail*]
  }

  measure: count_of_mentions_with_snoring {
    type: count_distinct
    filters: [entity.entity_id: "UMLS/C0037384",certainty_assessment__value: "LIKELY",temporal_assessment__value: "CURRENT"]
    sql: ${id} ;;
    drill_fields: [detail*]
  }

  measure: count_of_mentions_with_breathing_issues {
    type: count_distinct
    filters: [entity.entity_id: "UMLS/C4551689",certainty_assessment__value: "LIKELY",temporal_assessment__value: "CURRENT"]
    sql: ${id} ;;
    drill_fields: [detail*]
  }

  measure: count_of_mentions_with_hypertensive_state{
    type: count_distinct
    filters: [entity.entity_id: "UMLS/C0020538",certainty_assessment__value: "LIKELY",temporal_assessment__value: "CURRENT"]
    sql: ${id} ;;
    drill_fields: [detail*]
  }

  # Here's what a typical dimension looks like in LookML.
  # A dimension is a groupable field that can be used to filter query results.
  # This dimension will be called "Certainty Assessment Confidence" in Explore.

  dimension: certainty_assessment__confidence {
    type: number
    sql: ${TABLE}.certaintyAssessment.confidence ;;
    group_label: "Certainty Assessment"
    group_item_label: "Confidence"
  }

  # A measure is a field that uses a SQL aggregate function. Here are defined sum and average
  # measures for this dimension, but you can also add measures of many different aggregates.
  # Click on the type parameter to see all the options in the Quick Help panel on the right.

  measure: total_certainty_assessment__confidence {
    type: sum
    sql: ${certainty_assessment__confidence} ;;
  }

  measure: average_certainty_assessment__confidence {
    type: average
    sql: ${certainty_assessment__confidence} ;;
  }

  dimension: certainty_assessment__value {
    type: string
    sql: ${TABLE}.certaintyAssessment.value ;;
    group_label: "Certainty Assessment"
    group_item_label: "Value"
  }

  dimension: confidence {
    type: number
    sql: ${TABLE}.confidence ;;
    value_format_name: decimal_2
  }

  dimension: confidence_percent {
    label: "Confidence %"
    type: number
    sql: ${confidence}*100 ;;
    value_format_name: decimal_0
  }

  measure: confidence_min {
    label: "Confidence Min"
    type: min
    sql: ${confidence} ;;
    value_format_name: decimal_2
  }

  measure: confidence_max {
    label: "Confidence Max"
    type: max
    sql: ${confidence} ;;
    value_format_name: decimal_2
  }

  measure: confidence_mean {
    label: "Confidence Mean"
    type: average
    sql: ${confidence} ;;
    value_format_name: decimal_2
  }

  measure: confidence_median {
    label: "Confidence Median"
    type: median
    sql: ${confidence} ;;
    value_format_name: decimal_2
  }


  # This field is hidden, which means it will not show up in Explore.
  # If you want this field to be displayed, remove "hidden: yes".

  dimension: linked_entities {
    hidden: yes
    sql: ${TABLE}.linkedEntities ;;
  }

  dimension: mention_id {
    type: string
    sql: ${TABLE}.mentionId ;;
  }

  dimension: subject__confidence {
    type: number
    sql: ${TABLE}.subject.confidence ;;
    group_label: "Subject"
    group_item_label: "Confidence"
  }

  dimension: subject__value {
    type: string
    sql: ${TABLE}.subject.value ;;
    group_label: "Subject"
    group_item_label: "Value"
  }

  dimension: temporal_assessment__confidence {
    type: number
    sql: ${TABLE}.temporalAssessment.confidence ;;
    group_label: "Temporal Assessment"
    group_item_label: "Confidence"
  }

  dimension: temporal_assessment__value {
    type: string
    sql: ${TABLE}.temporalAssessment.value ;;
    group_label: "Temporal Assessment"
    group_item_label: "Value"
  }

  dimension: text__begin_offset {
    type: number
    sql: ${TABLE}.text.beginOffset ;;
    group_label: "Text"
    group_item_label: "Begin Offset"
  }

  dimension: text__content {
    type: string
    sql: regexp_replace(LOWER(${TABLE}.text.content),"[^a-zA-Z0-9 -]",' ' );;
    group_label: "Text"
    group_item_label: "Content"
  }

  dimension: text_highlighted {
    hidden: no  # UNHIDDEN
    label: "Text (Highlighted) Processed by NLP"
    sql: ${text__content} ;;
    html:
          {% assign w = nlpinput.text_list | split: '|RECORD|' %}

                {% if w[0] %} {% assign w0 = w[0] %} {% else %} {% assign w0 = 'zzzzzzz' %} {% endif %}
                {% if w[1] %} {% assign w1 = w[1] %} {% else %} {% assign w1 = 'zzzzzzz' %} {% endif %}
                {% if w[2] %} {% assign w2 = w[2] %} {% else %} {% assign w2 = 'zzzzzzz' %} {% endif %}
                {% if w[3] %} {% assign w3 = w[3] %} {% else %} {% assign w3 = 'zzzzzzz' %} {% endif %}
                {% if w[4] %} {% assign w4 = w[4] %} {% else %} {% assign w4 = 'zzzzzzz' %} {% endif %}
                {% if w[5] %} {% assign w5 = w[5] %} {% else %} {% assign w5 = 'zzzzzzz' %} {% endif %}
                {% if w[6] %} {% assign w6 = w[6] %} {% else %} {% assign w6 = 'zzzzzzz' %} {% endif %}
                {% if w[7] %} {% assign w7 = w[7] %} {% else %} {% assign w7 = 'zzzzzzz' %} {% endif %}
                {% if w[8] %} {% assign w8 = w[8] %} {% else %} {% assign w8 = 'zzzzzzz' %} {% endif %}
                {% if w[9] %} {% assign w9 = w[9] %} {% else %} {% assign w9 = 'zzzzzzz' %} {% endif %}
                {% if w[10] %} {% assign w10 = w[10] %} {% else %} {% assign w10 = 'zzzzzzz' %} {% endif %}
                {% if w[11] %} {% assign w11 = w[11] %} {% else %} {% assign w11 = 'zzzzzzz' %} {% endif %}
                {% if w[12] %} {% assign w12 = w[12] %} {% else %} {% assign w12 = 'zzzzzzz' %} {% endif %}
                {% if w[13] %} {% assign w13 = w[13] %} {% else %} {% assign w13 = 'zzzzzzz' %} {% endif %}
                {% if w[14] %} {% assign w14 = w[14] %} {% else %} {% assign w14 = 'zzzzzzz' %} {% endif %}
                {% if w[15] %} {% assign w15 = w[15] %} {% else %} {% assign w15 = 'zzzzzzz' %} {% endif %}
                {% if w[16] %} {% assign w16 = w[16] %} {% else %} {% assign w16 = 'zzzzzzz' %} {% endif %}
                {% if w[17] %} {% assign w17 = w[17] %} {% else %} {% assign w17 = 'zzzzzzz' %} {% endif %}
                {% if w[18] %} {% assign w18 = w[18] %} {% else %} {% assign w18 = 'zzzzzzz' %} {% endif %}
                {% if w[19] %} {% assign w19 = w[19] %} {% else %} {% assign w19 = 'zzzzzzz' %} {% endif %}
                {% if w[20] %} {% assign w20 = w[20] %} {% else %} {% assign w20 = 'zzzzzzz' %} {% endif %}
                {% if w[21] %} {% assign w21 = w[21] %} {% else %} {% assign w21 = 'zzzzzzz' %} {% endif %}
                {% if w[22] %} {% assign w22 = w[22] %} {% else %} {% assign w22 = 'zzzzzzz' %} {% endif %}
                {% if w[23] %} {% assign w23 = w[23] %} {% else %} {% assign w23 = 'zzzzzzz' %} {% endif %}
                {% if w[24] %} {% assign w24 = w[24] %} {% else %} {% assign w24 = 'zzzzzzz' %} {% endif %}
                {% if w[25] %} {% assign w25 = w[25] %} {% else %} {% assign w25 = 'zzzzzzz' %} {% endif %}

      {% if w[26] %} {% assign w26 = w[26] %} {% else %} {% assign w26 = 'zzzzzzz' %} {% endif %}
      {% if w[27] %} {% assign w27 = w[27] %} {% else %} {% assign w27 = 'zzzzzzz' %} {% endif %}

      {% assign h0 = w0 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h1 = w1 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h2 = w2 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h3 = w3 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h4 = w4 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h5 = w5 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h6 = w6 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h7 = w7 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h8 = w8 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h9 = w9 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h10 = w10 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h11 = w11 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h12 = w12 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h13 = w13 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h14 = w14 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h15 = w15 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h16 = w16 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h17 = w17 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h18 = w18 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h19 = w19 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h20 = w20 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h21 = w21 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h22 = w22 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h23 = w23 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h24 = w24 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h25 = w25 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h26 = w26 | prepend: '<mark>' | append: '</mark>' %}
      {% assign h27 = w27 | prepend: '<mark>' | append: '</mark>' %}
      <div>{{value | replace:w0, h0
      | replace: w1, h1
      | replace: w2, h2
      | replace: w3, h3
      | replace: w4, h4
      | replace: w5, h5
      | replace: w6, h6
      | replace: w7, h7
      | replace: w8, h8
      | replace: w9, h9
      | replace: w10, h10
      | replace: w11, h11
      | replace: w12, h12
      | replace: w13, h13
      | replace: w14, h14
      | replace: w15, h15
      | replace: w16, h16
      | replace: w17, h17
      | replace: w18, h18
      | replace: w19, h19
      | replace: w20, h20
      | replace: w21, h21
      | replace: w22, h22
      | replace: w23, h23
      | replace: w24, h24
      | replace: w25, h25
      | replace: w26, h26
      | replace: w27, h27
      }}</div>
      ;;
  }

  dimension: text_highlighted_trim {
    sql: TRIM(${text_highlighted}) ;;
    type: string
  }


  dimension: type {
    type: string
    sql: UPPER(regexp_replace(LOWER(${TABLE}.type),"[^a-zA-Z0-9 -]",' ')) ;;
    group_label: "(1) Term"
    label: "Term Type Detail"
    }

  measure: count {
    type: count
    label: "Number of Unique Mentions"
    #drill_fields: [id]
    filters: [entity.preferred_term: "-NULL"]
  }
  set: detail {
    fields: [
      entitymentions.id,
      entitymentions.type,
      entitymentions.certainty_assessment__value,
      entitymentions.temporal_assessment__value,
      entity.entity_id,
      entity__vocabulary_codes.vocab_codes_linked]
  }
}

# The name of this view in Looker is "Entitymentions Linked Entities"
view: entitymentions__linked_entities {

  # No primary key is defined for this view. In order to join this view in an Explore,
  # define primary_key: yes on a dimension that has no repeated values.

  # Here's what a typical dimension looks like in LookML.
  # A dimension is a groupable field that can be used to filter query results.
  # This dimension will be called "Entity ID" in Explore.

  dimension: entity_id {
    type: string
    hidden: yes
    sql: ${TABLE}.entityid ;;
  }

  measure: entity_id_agg {
    label: "Entity ID"
    type: string
    sql: STRING_AGG(${entity_id} ORDER BY ${entity_id}) ;;
  }

  dimension: offset {
    type: number
    sql: entity_id_offset ;;
  }

  # This field is hidden, which means it will not show up in Explore.
  # If you want this field to be displayed, remove "hidden: yes".

  dimension: entitymentions__linked_entities {
    type: string
    hidden: yes
    sql: entitymentions__linked_entities ;;
  }

  set: detail {
    fields: [
    entitymentions.id,
    entitymentions.type,
    entitymentions.certainty_assessment__value,
    entitymentions.temporal_assessment__value,
    entity.entityid,
    entity__vocabulary_codes.vocab_codes_linked]
  }
}


# The name of this view in Looker is "Nlpinput"
view: nlpinput {
  # The sql_table_name parameter indicates the underlying database table
  # to be used for all fields in this view.
  sql_table_name: `###`
    ;;
  drill_fields: [id]
  # This primary key is the unique key for this table in the underlying database.
  # You need to define a primary key in a view in order to join to other views.

  dimension: id {
    #join with entitymentions.id
    primary_key: yes
    type: string
    sql: ${TABLE}.id ;;
  }

  # Here's what a typical dimension looks like in LookML.
  # A dimension is a groupable field that can be used to filter query results.
  # This dimension will be called "Content" in Explore.

  dimension: content {
    type: string
    sql: ${TABLE}.content ;;
  }

  dimension: text_content {
    full_suggestions: yes
    type: string
    sql: regexp_replace(LOWER(${TABLE}.content),"[^a-zA-Z0-9 -]",' ');;
    #sql: ${TABLE}.text.content ;;
    group_label: "(1) Term"
    label: "Original Term"
    #group_item_label: "Content"
    # link: {
    #   label: "See Term View for {{ value }}"
    #   url: "/dashboards-next/healthcare_nlp_api_2.0::nlp_term_view_2_0?Filter+on+Original+Term=%25{{ value | url_encode }}%25"
    #   icon_url: "http://www.looker.com/favicon.ico"
    # }
  }

  measure: text_list {
    label: "Filtered Text List"
    description: "All original flagged terms"
    type: list
    list_field: text_content
  }

  measure: count {
    type: count
    drill_fields: [id]
  }
}

# The name of this view in Looker is "Relations"
view: relations {
  # The sql_table_name parameter indicates the underlying database table
  # to be used for all fields in this view.
  sql_table_name: `###`
    ;;
  drill_fields: [id]
  # This primary key is the unique key for this table in the underlying database.
  # You need to define a primary key in a view in order to join to other views.

  dimension: id {
    primary_key: yes
    type: string
    sql: ${TABLE}.id ;;
  }

  # Here's what a typical dimension looks like in LookML.
  # A dimension is a groupable field that can be used to filter query results.
  # This dimension will be called "Confidence" in Explore.

  dimension: confidence {
    type: number
    sql: ${TABLE}.confidence ;;
  }

  # A measure is a field that uses a SQL aggregate function. Here are defined sum and average
  # measures for this dimension, but you can also add measures of many different aggregates.
  # Click on the type parameter to see all the options in the Quick Help panel on the right.

  measure: total_confidence {
    type: sum
    sql: ${confidence} ;;
  }

  measure: average_confidence {
    type: average
    sql: ${confidence} ;;
  }

  dimension: object_id {
    type: string
    sql: ${TABLE}.objectId ;;
  }

  dimension: subject_id {
    type: string
    sql: ${TABLE}.subjectId ;;
  }

  measure: count {
    type: count
    drill_fields: [id]
  }
}
